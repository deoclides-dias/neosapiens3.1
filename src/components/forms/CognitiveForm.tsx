// =============================================================================
// COGNITIVE FORM COMPONENT - NEOSAPIENS - VERS√ÉO CORRIGIDA
// =============================================================================
// Componente: Formul√°rio de Avalia√ß√£o Cognitiva (60 quest√µes em 6 steps)
// Vers√£o: 1.1 - Corrigida
// Data: 2025-01-03

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChevronLeft, 
  ChevronRight, 
  CheckCircle, 
  Circle, 
  Brain,
  BookOpen,
  Zap,
  Target,
  Lightbulb,
  Gauge,
  Timer,
  RotateCcw
} from 'lucide-react';
import { useCognitiveForm } from '../../hooks/useCognitiveForm';
import { CognitiveData } from '../../services/cognitiveService';

// =============================================================================
// COMPONENTES DE QUEST√ïES POR STEP
// =============================================================================

// STEP 1: ESTILOS DE APRENDIZAGEM
const LearningStylesStep: React.FC<{
  data: Partial<CognitiveData>;
  updateAnswers: (field: keyof CognitiveData, answers: number[]) => void;
}> = ({ data, updateAnswers }) => {
  
  const visualQuestions = [
    "Prefiro estudar com diagramas e mapas mentais",
    "Aprendo melhor vendo demonstra√ß√µes visuais",
    "Gosto de usar cores e destaques para organizar informa√ß√µes"
  ];
  
  const auditoryQuestions = [
    "Prefiro ouvir explica√ß√µes do que ler textos",
    "Aprendo melhor discutindo o conte√∫do com outros",
    "Gosto de estudar com m√∫sica ou sons de fundo"
  ];
  
  const readingQuestions = [
    "Prefiro ler textos detalhados para aprender",
    "Fa√ßo muitas anota√ß√µes e resumos escritos",
    "Aprendo melhor fazendo listas e esquemas textuais"
  ];
  
  const kinestheticQuestions = [
    "Preciso me mover ou usar as m√£os enquanto estudo",
    "Aprendo melhor fazendo atividades pr√°ticas",
    "Prefiro experimentar do que apenas ouvir teorias"
  ];

  const renderQuestionGroup = (
    title: string,
    questions: string[],
    field: keyof CognitiveData,
    icon: React.ReactNode
  ) => (
    <div className="bg-white/5 rounded-xl p-6 border border-white/10">
      <div className="flex items-center gap-3 mb-4">
        {icon}
        <h3 className="text-lg font-medium text-white">{title}</h3>
      </div>
      
      {questions.map((question, index) => (
        <div key={index} className="mb-4">
          <p className="text-white/90 mb-2">{question}</p>
          <div className="flex gap-2">
            {[1, 2, 3, 4].map((value) => (
              <button
                key={value}
                onClick={() => {
                  const currentAnswers = [...(data[field] || [])];
                  currentAnswers[index] = value;
                  updateAnswers(field, currentAnswers);
                }}
                className={`px-3 py-2 rounded-lg border transition-all ${
                  (data[field] || [])[index] === value
                    ? 'bg-blue-500 border-blue-400 text-white'
                    : 'border-white/20 text-white/70 hover:border-white/40'
                }`}
              >
                {value === 1 ? 'Nunca' : value === 2 ? '√Äs vezes' : value === 3 ? 'Frequente' : 'Sempre'}
              </button>
            ))}
          </div>
        </div>
      ))}
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-white mb-2">üß† Estilos de Aprendizagem</h2>
        <p className="text-white/70">Como voc√™ melhor absorve e processa informa√ß√µes?</p>
      </div>

      {renderQuestionGroup("üìä Visual", visualQuestions, 'visual_learning', <Target className="w-5 h-5 text-blue-400" />)}
      {renderQuestionGroup("üéß Auditivo", auditoryQuestions, 'auditory_learning', <Gauge className="w-5 h-5 text-green-400" />)}
      {renderQuestionGroup("üìñ Leitura/Escrita", readingQuestions, 'reading_learning', <BookOpen className="w-5 h-5 text-purple-400" />)}
      {renderQuestionGroup("ü§∏ Cinest√©sico", kinestheticQuestions, 'kinesthetic_learning', <Zap className="w-5 h-5 text-orange-400" />)}
    </div>
  );
};

// STEP 2: PROCESSAMENTO COGNITIVO
const ProcessingStylesStep: React.FC<{
  data: Partial<CognitiveData>;
  updateAnswers: (field: keyof CognitiveData, answers: number[]) => void;
}> = ({ data, updateAnswers }) => {
  
  const sequentialQuestions = [
    "Prefiro instru√ß√µes passo a passo bem detalhadas",
    "Trabalho melhor com cronogramas e estruturas definidas",
    "Prefiro completar uma tarefa antes de come√ßar outra"
  ];
  
  const holisticQuestions = [
    "Prefiro ver o panorama geral antes dos detalhes",
    "Trabalho bem com m√∫ltiplos projetos simultaneamente"
  ];
  
  const analyticalQuestions = [
    "Preciso de dados e evid√™ncias para tomar decis√µes",
    "Prefiro quebrar problemas complexos em partes menores",
    "Gosto de analisar pr√≥s e contras detalhadamente"
  ];
  
  const intuitiveQuestions = [
    "Confio na minha intui√ß√£o para resolver problemas",
    "Frequentemente tenho insights s√∫bitos sobre situa√ß√µes"
  ];

  const renderQuestionGroup = (
    title: string,
    questions: string[],
    field: keyof CognitiveData,
    color: string
  ) => (
    <div className="bg-white/5 rounded-xl p-6 border border-white/10">
      <h3 className={`text-lg font-medium mb-4 ${color}`}>{title}</h3>
      {questions.map((question, index) => (
        <div key={index} className="mb-4">
          <p className="text-white/90 mb-2">{question}</p>
          <div className="flex gap-2">
            {[1, 2, 3, 4, 5].map((value) => (
              <button
                key={value}
                onClick={() => {
                  const currentAnswers = [...(data[field] || [])];
                  currentAnswers[index] = value;
                  updateAnswers(field, currentAnswers);
                }}
                className={`px-3 py-1 rounded border transition-all ${
                  (data[field] || [])[index] === value
                    ? 'bg-blue-500 border-blue-400 text-white'
                    : 'border-white/20 text-white/70 hover:border-white/40'
                }`}
              >
                {value}
              </button>
            ))}
          </div>
          <div className="flex justify-between text-xs text-white/50 mt-1">
            <span>Discordo</span>
            <span>Concordo</span>
          </div>
        </div>
      ))}
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-white mb-2">üßÆ Processamento Cognitivo</h2>
        <p className="text-white/70">Como sua mente organiza e processa informa√ß√µes?</p>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        <div className="space-y-6">
          {renderQuestionGroup("üìã Sequencial", sequentialQuestions, 'sequential_processing', 'text-blue-400')}
          {renderQuestionGroup("üîç Anal√≠tico", analyticalQuestions, 'analytical_thinking', 'text-green-400')}
        </div>
        <div className="space-y-6">
          {renderQuestionGroup("üåê Hol√≠stico", holisticQuestions, 'holistic_processing', 'text-purple-400')}
          {renderQuestionGroup("üí´ Intuitivo", intuitiveQuestions, 'intuitive_thinking', 'text-orange-400')}
        </div>
      </div>
    </div>
  );
};

// STEP 3: CRIATIVIDADE & INOVA√á√ÉO
const CreativityStep: React.FC<{
  data: Partial<CognitiveData>;
  updateAnswers: (field: keyof CognitiveData, answers: number[]) => void;
}> = ({ data, updateAnswers }) => {
  
  const creativityQuestions = [
    "Frequentemente tenho ideias originais e inovadoras",
    "Gosto de encontrar solu√ß√µes n√£o convencionais",
    "Me sinto confort√°vel pensando 'fora da caixa'",
    "Tenho facilidade para conectar ideias aparentemente desconexas"
  ];
  
  const problemSolvingQuestions = [
    "Abordo problemas de m√∫ltiplas perspectivas",
    "Persistindo quando enfrento desafios complexos",
    "Costumo encontrar padr√µes em situa√ß√µes complexas",
    "Tenho facilidade para gerar v√°rias alternativas de solu√ß√£o"
  ];

  const renderQuestionGroup = (
    title: string,
    questions: string[],
    field: keyof CognitiveData,
    icon: React.ReactNode,
    color: string
  ) => (
    <div className="bg-white/5 rounded-xl p-6 border border-white/10">
      <div className="flex items-center gap-3 mb-4">
        {icon}
        <h3 className={`text-lg font-medium ${color}`}>{title}</h3>
      </div>
      {questions.map((question, index) => (
        <div key={index} className="mb-4">
          <p className="text-white/90 mb-2">{question}</p>
          <div className="flex gap-2">
            {[1, 2, 3, 4, 5].map((value) => (
              <button
                key={value}
                onClick={() => {
                  const currentAnswers = [...(data[field] || [])];
                  currentAnswers[index] = value;
                  updateAnswers(field, currentAnswers);
                }}
                className={`px-3 py-1 rounded border transition-all ${
                  (data[field] || [])[index] === value
                    ? 'bg-blue-500 border-blue-400 text-white'
                    : 'border-white/20 text-white/70 hover:border-white/40'
                }`}
              >
                {value}
              </button>
            ))}
          </div>
        </div>
      ))}
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-white mb-2">üé® Criatividade & Inova√ß√£o</h2>
        <p className="text-white/70">Avalie seus padr√µes de pensamento criativo e resolu√ß√£o de problemas</p>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        {renderQuestionGroup(
          "Pensamento Criativo", 
          creativityQuestions, 
          'creative_thinking',
          <Lightbulb className="w-5 h-5 text-yellow-400" />,
          'text-yellow-400'
        )}
        {renderQuestionGroup(
          "Resolu√ß√£o de Problemas", 
          problemSolvingQuestions, 
          'problem_solving',
          <Target className="w-5 h-5 text-red-400" />,
          'text-red-400'
        )}
      </div>
    </div>
  );
};

// STEP 4: TOMADA DE DECIS√ÉO
const DecisionMakingStep: React.FC<{
  data: Partial<CognitiveData>;
  updateAnswers: (field: keyof CognitiveData, answers: number[]) => void;
}> = ({ data, updateAnswers }) => {
  
  const rationalQuestions = [
    "Preciso de dados concretos para tomar decis√µes importantes",
    "Analiso cuidadosamente pr√≥s e contras antes de decidir",
    "Prefiro decis√µes baseadas em l√≥gica do que em sentimentos"
  ];
  
  const emotionalQuestions = [
    "Confio na minha intui√ß√£o para decis√µes importantes",
    "Considero como me sinto sobre uma decis√£o antes de tom√°-la"
  ];
  
  const quickQuestions = [
    "Tomo decis√µes rapidamente quando necess√°rio",
    "Confio na minha primeira impress√£o sobre situa√ß√µes",
    "Prefiro decidir logo do que ficar pensando muito tempo"
  ];
  
  const deliberativeQuestions = [
    "Gosto de ter tempo para pensar antes de decidir",
    "Consulto outras pessoas antes de decis√µes importantes"
  ];

  const renderQuestionGroup = (
    title: string,
    questions: string[],
    field: keyof CognitiveData,
    color: string,
    icon: React.ReactNode
  ) => (
    <div className="bg-white/5 rounded-xl p-6 border border-white/10">
      <div className="flex items-center gap-3 mb-4">
        {icon}
        <h3 className={`text-lg font-medium ${color}`}>{title}</h3>
      </div>
      {questions.map((question, index) => (
        <div key={index} className="mb-4">
          <p className="text-white/90 mb-2 text-sm">{question}</p>
          <div className="flex gap-2">
            {[1, 2, 3, 4, 5].map((value) => (
              <button
                key={value}
                onClick={() => {
                  const currentAnswers = [...(data[field] || [])];
                  currentAnswers[index] = value;
                  updateAnswers(field, currentAnswers);
                }}
                className={`px-3 py-1 rounded border transition-all ${
                  (data[field] || [])[index] === value
                    ? 'bg-blue-500 border-blue-400 text-white'
                    : 'border-white/20 text-white/70 hover:border-white/40'
                }`}
              >
                {value}
              </button>
            ))}
          </div>
          <div className="flex justify-between text-xs text-white/50 mt-1">
            <span>Discordo</span>
            <span>Concordo</span>
          </div>
        </div>
      ))}
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-white mb-2">‚öñÔ∏è Tomada de Decis√£o</h2>
        <p className="text-white/70">Como voc√™ processa escolhas e toma decis√µes?</p>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        <div className="space-y-6">
          {renderQuestionGroup(
            "Racional", 
            rationalQuestions, 
            'rational_decisions',
            'text-blue-400',
            <Brain className="w-5 h-5 text-blue-400" />
          )}
          {renderQuestionGroup(
            "R√°pido", 
            quickQuestions, 
            'quick_decisions',
            'text-green-400',
            <Zap className="w-5 h-5 text-green-400" />
          )}
        </div>
        <div className="space-y-6">
          {renderQuestionGroup(
            "Emocional", 
            emotionalQuestions, 
            'emotional_decisions',
            'text-purple-400',
            <Target className="w-5 h-5 text-purple-400" />
          )}
          {renderQuestionGroup(
            "Deliberativo", 
            deliberativeQuestions, 
            'deliberative_decisions',
            'text-orange-400',
            <Timer className="w-5 h-5 text-orange-400" />
          )}
        </div>
      </div>
    </div>
  );
};

// STEP 5: FUN√á√ïES EXECUTIVAS
const ExecutiveFunctionsStep: React.FC<{
  data: Partial<CognitiveData>;
  updateAnswers: (field: keyof CognitiveData, answers: number[]) => void;
}> = ({ data, updateAnswers }) => {
  
  const planningQuestions = [
    "Fa√ßo planos detalhados antes de come√ßar projetos importantes",
    "Tenho facilidade para organizar tarefas em ordem de prioridade",
    "Consigo estimar bem o tempo necess√°rio para completar atividades",
    "Mantenho agendas e listas organizadas regularmente"
  ];
  
  const focusQuestions = [
    "Consigo me concentrar por longos per√≠odos em uma tarefa",
    "N√£o me distraio facilmente com ru√≠dos ou movimento ao redor",
    "Termino tarefas mesmo quando elas se tornam entediantes",
    "Mantenho aten√ß√£o aos detalhes importantes em projetos"
  ];
  
  const flexibilityQuestions = [
    "Me adapto facilmente quando planos precisam mudar",
    "Consigo alternar entre diferentes tarefas sem dificuldade",
    "Aceito bem feedback e modifico minha abordagem quando necess√°rio",
    "Encontro solu√ß√µes alternativas quando algo n√£o funciona"
  ];

  const renderQuestionGroup = (
    title: string,
    questions: string[],
    field: keyof CognitiveData,
    color: string,
    icon: React.ReactNode
  ) => (
    <div className="bg-white/5 rounded-xl p-6 border border-white/10">
      <div className="flex items-center gap-3 mb-4">
        {icon}
        <h3 className={`text-lg font-medium ${color}`}>{title}</h3>
      </div>
      {questions.map((question, index) => (
        <div key={index} className="mb-4">
          <p className="text-white/90 mb-2 text-sm">{question}</p>
          <div className="flex gap-2">
            {[1, 2, 3, 4, 5].map((value) => (
              <button
                key={value}
                onClick={() => {
                  const currentAnswers = [...(data[field] || [])];
                  currentAnswers[index] = value;
                  updateAnswers(field, currentAnswers);
                }}
                className={`px-3 py-1 rounded border transition-all ${
                  (data[field] || [])[index] === value
                    ? 'bg-blue-500 border-blue-400 text-white'
                    : 'border-white/20 text-white/70 hover:border-white/40'
                }`}
              >
                {value}
              </button>
            ))}
          </div>
          <div className="flex justify-between text-xs text-white/50 mt-1">
            <span>Nunca</span>
            <span>Sempre</span>
          </div>
        </div>
      ))}
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-white mb-2">üéØ Fun√ß√µes Executivas</h2>
        <p className="text-white/70">Avalie suas capacidades de planejamento, foco e organiza√ß√£o</p>
      </div>

      <div className="space-y-6">
        {renderQuestionGroup(
          "Planejamento & Organiza√ß√£o", 
          planningQuestions, 
          'planning_organization',
          'text-blue-400',
          <Target className="w-5 h-5 text-blue-400" />
        )}
        {renderQuestionGroup(
          "Foco & Aten√ß√£o", 
          focusQuestions, 
          'focus_attention',
          'text-green-400',
          <Brain className="w-5 h-5 text-green-400" />
        )}
        {renderQuestionGroup(
          "Flexibilidade Cognitiva", 
          flexibilityQuestions, 
          'cognitive_flexibility',
          'text-purple-400',
          <RotateCcw className="w-5 h-5 text-purple-400" />
        )}
      </div>
    </div>
  );
};

// STEP 6: TESTES COGNITIVOS SIMPLIFICADOS (placeholder)
const CognitiveTestsStep: React.FC<{
  data: Partial<CognitiveData>;
  updateAnswers: (field: keyof CognitiveData, answers: number[]) => void;
}> = ({ data, updateAnswers }) => {
  
  // Simula√ß√£o simples dos testes - na implementa√ß√£o real seria interativo
  const handleTestComplete = (testType: keyof CognitiveData, score: number) => {
    const currentAnswers = [...(data[testType] || [])];
    currentAnswers.push(score);
    updateAnswers(testType, currentAnswers);
  };

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-white mb-2">üß™ Testes Cognitivos</h2>
        <p className="text-white/70">Testes pr√°ticos das suas capacidades mentais</p>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        <div className="bg-white/5 rounded-xl p-6 border border-white/10">
          <h3 className="text-lg font-medium text-blue-400 mb-4">üß† Teste de Mem√≥ria</h3>
          <p className="text-white/70 mb-4">Teste simplificado de amplitude de mem√≥ria</p>
          <button
            onClick={() => handleTestComplete('memory_span', Math.floor(Math.random() * 5) + 3)}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
          >
            Iniciar Teste
          </button>
          {(data.memory_span?.length || 0) > 0 && (
            <p className="text-green-400 mt-2">‚úÖ Teste conclu√≠do!</p>
          )}
        </div>

        <div className="bg-white/5 rounded-xl p-6 border border-white/10">
          <h3 className="text-lg font-medium text-green-400 mb-4">üîç Reconhecimento de Padr√µes</h3>
          <p className="text-white/70 mb-4">Teste de identifica√ß√£o de padr√µes</p>
          <button
            onClick={() => handleTestComplete('pattern_recognition', Math.floor(Math.random() * 5) + 3)}
            className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
          >
            Iniciar Teste
          </button>
          {(data.pattern_recognition?.length || 0) > 0 && (
            <p className="text-green-400 mt-2">‚úÖ Teste conclu√≠do!</p>
          )}
        </div>

        <div className="bg-white/5 rounded-xl p-6 border border-white/10">
          <h3 className="text-lg font-medium text-purple-400 mb-4">‚ö° Velocidade de Processamento</h3>
          <p className="text-white/70 mb-4">Teste de velocidade de rea√ß√£o</p>
          <button
            onClick={() => handleTestComplete('processing_speed', Math.floor(Math.random() * 2000) + 1000)}
            className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700"
          >
            Iniciar Teste
          </button>
          {(data.processing_speed?.length || 0) > 0 && (
            <p className="text-green-400 mt-2">‚úÖ Teste conclu√≠do!</p>
          )}
        </div>

        <div className="bg-white/5 rounded-xl p-6 border border-white/10">
          <h3 className="text-lg font-medium text-orange-400 mb-4">üîÑ Mem√≥ria de Trabalho</h3>
          <p className="text-white/70 mb-4">Teste de mem√≥ria de trabalho</p>
          <button
            onClick={() => handleTestComplete('working_memory', Math.floor(Math.random() * 5) + 3)}
            className="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700"
          >
            Iniciar Teste
          </button>
          {(data.working_memory?.length || 0) > 0 && (
            <p className="text-green-400 mt-2">‚úÖ Teste conclu√≠do!</p>
          )}
        </div>
      </div>
      
      {[data.memory_span, data.pattern_recognition, data.processing_speed, data.working_memory]
        .every(test => (test?.length || 0) > 0) && (
        <div className="bg-green-500/20 border border-green-500/50 rounded-lg p-4 text-center">
          <CheckCircle className="w-8 h-8 text-green-400 mx-auto mb-2" />
          <p className="text-green-200 font-medium">
            üéâ Todos os testes cognitivos foram conclu√≠dos!
          </p>
        </div>
      )}
    </div>
  );
};

// =============================================================================
// COMPONENTE PRINCIPAL
// =============================================================================

const CognitiveForm: React.FC = () => {
  const {
    data,
    currentStep,
    currentStepConfig,
    steps,
    goToStep,
    nextStep,
    previousStep,
    completedSteps,
    overallProgress,
    progressStats,
    canGoNext,
    canFinalize,
    isFirstStep,
    isLastStep,
    isLoading,
    isSaving,
    error,
    updateAnswers,
    saveProgress,
    finalizeCognitiveAssessment
  } = useCognitiveForm();

  const [showSuccess, setShowSuccess] = useState(false);

  // Handler para finalizar avalia√ß√£o
  const handleFinalize = async () => {
    try {
      const scores = await finalizeCognitiveAssessment();
      if (scores) {
        setShowSuccess(true);
        setTimeout(() => {
          // Redirecionar para resultados ou pr√≥xima etapa
          window.location.href = '/analysis';
        }, 2000);
      }
    } catch (error) {
      console.error('Erro ao finalizar:', error);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center">
        <div className="text-center">
          <Brain className="w-16 h-16 text-white/50 animate-pulse mx-auto mb-4" />
          <p className="text-white/70">Carregando avalia√ß√£o cognitiva...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 py-8">
      <div className="container mx-auto px-4 max-w-4xl">
        
        {/* HEADER COM PROGRESSO */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-3xl font-bold text-white">‚ö° Avalia√ß√£o Cognitiva</h1>
            <div className="text-right">
              <div className="text-sm text-white/70">Progresso Geral</div>
              <div className="text-xl font-bold text-white">{progressStats.totalProgress}%</div>
            </div>
          </div>
          
          {/* BARRA DE PROGRESSO */}
          <div className="w-full bg-white/10 rounded-full h-3">
            <motion.div
              className="bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${progressStats.totalProgress}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>
          
          {/* STEPS INDICATOR */}
          <div className="flex justify-between mt-4">
            {steps.map((step) => (
              <button
                key={step.id}
                onClick={() => step.canAccess && goToStep(step.id)}
                className={`flex flex-col items-center p-2 rounded-lg transition-all ${
                  step.id === currentStep
                    ? 'bg-white/10 text-white'
                    : step.completed
                    ? 'text-green-400 hover:bg-white/5'
                    : step.canAccess
                    ? 'text-white/50 hover:bg-white/5'
                    : 'text-white/20 cursor-not-allowed'
                }`}
                disabled={!step.canAccess}
              >
                {step.completed ? (
                  <CheckCircle className="w-6 h-6 mb-1" />
                ) : (
                  <Circle className="w-6 h-6 mb-1" />
                )}
                <span className="text-xs">{step.emoji}</span>
              </button>
            ))}
          </div>
        </div>

        {/* ERRO */}
        {error && (
          <div className="bg-red-500/20 border border-red-500/50 rounded-lg p-4 mb-6">
            <p className="text-red-200">{error}</p>
          </div>
        )}

        {/* CONTE√öDO DO STEP ATUAL */}
        <AnimatePresence mode="wait">
          <motion.div
            key={currentStep}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3 }}
            className="bg-white/5 backdrop-blur-lg rounded-2xl p-8 border border-white/10"
          >
            {currentStep === 1 && <LearningStylesStep data={data} updateAnswers={updateAnswers} />}
            {currentStep === 2 && <ProcessingStylesStep data={data} updateAnswers={updateAnswers} />}
            {currentStep === 3 && <CreativityStep data={data} updateAnswers={updateAnswers} />}
            {currentStep === 4 && <DecisionMakingStep data={data} updateAnswers={updateAnswers} />}
            {currentStep === 5 && <ExecutiveFunctionsStep data={data} updateAnswers={updateAnswers} />}
            {currentStep === 6 && <CognitiveTestsStep data={data} updateAnswers={updateAnswers} />}
          </motion.div>
        </AnimatePresence>

        {/* NAVEGA√á√ÉO */}
        <div className="flex justify-between items-center mt-8">
          <button
            onClick={previousStep}
            disabled={isFirstStep}
            className={`flex items-center gap-2 px-6 py-3 rounded-xl transition-all ${
              isFirstStep
                ? 'bg-white/5 text-white/30 cursor-not-allowed'
                : 'bg-white/10 text-white hover:bg-white/20'
            }`}
          >
            <ChevronLeft className="w-5 h-5" />
            Anterior
          </button>

          <div className="text-center">
            <div className="text-white/70 text-sm">
              {currentStepConfig?.title}
            </div>
            <div className="text-white/50 text-xs">
              {currentStepConfig?.estimatedTime}
            </div>
          </div>

          {isLastStep ? (
            <button
              onClick={handleFinalize}
              disabled={!canFinalize || isSaving}
              className={`flex items-center gap-2 px-6 py-3 rounded-xl transition-all ${
                canFinalize && !isSaving
                  ? 'bg-green-600 text-white hover:bg-green-700'
                  : 'bg-white/5 text-white/30 cursor-not-allowed'
              }`}
            >
              {isSaving ? 'Finalizando...' : 'Finalizar'}
              <CheckCircle className="w-5 h-5" />
            </button>
          ) : (
            <button
              onClick={nextStep}
              disabled={!canGoNext}
              className={`flex items-center gap-2 px-6 py-3 rounded-xl transition-all ${
                canGoNext
                  ? 'bg-blue-600 text-white hover:bg-blue-700'
                  : 'bg-white/5 text-white/30 cursor-not-allowed'
              }`}
            >
              Pr√≥ximo
              <ChevronRight className="w-5 h-5" />
            </button>
          )}
        </div>

        {/* AUTO-SAVE INDICATOR */}
        {isSaving && (
          <div className="fixed bottom-4 right-4 bg-blue-600 text-white px-4 py-2 rounded-lg">
            üíæ Salvando...
          </div>
        )}

        {/* SUCCESS MODAL */}
        {showSuccess && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
            <div className="bg-white rounded-xl p-8 text-center">
              <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                üéâ Avalia√ß√£o Cognitiva Conclu√≠da!
              </h3>
              <p className="text-gray-600">
                Redirecionando para o hub de an√°lises...
              </p>
            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default CognitiveForm;