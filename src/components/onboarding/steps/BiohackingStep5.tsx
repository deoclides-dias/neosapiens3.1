// src/components/onboarding/steps/BiohackingStep5.tsx - Sa√∫de Geral
// =============================================================================

import React, { useState, useEffect } from 'react';
import { 
  Heart, 
  Brain, 
  Pill, 
  AlertTriangle, 
  TrendingDown,
  Plus,
  X,
  Info,
  Activity,
  Shield
} from 'lucide-react';
import { BiohackingData } from '../../../types/biohacking';

interface BiohackingStep5Props {
  data: BiohackingData;
  onUpdate: (updates: Partial<BiohackingData>) => void;
  onValidationChange: (isValid: boolean) => void;
}

const BiohackingStep5: React.FC<BiohackingStep5Props> = ({
  data,
  onUpdate,
  onValidationChange
}) => {
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [insights, setInsights] = useState<{
    healthScore?: number;
    riskFactors?: string[];
    priorities?: string[];
  }>({});

  // üéØ CONDI√á√ïES CR√îNICAS COMUNS
  const chronicConditions = [
    'Nenhuma condi√ß√£o cr√¥nica', 'Hipertens√£o', 'Diabetes tipo 2', 'Diabetes tipo 1',
    'Colesterol alto', 'Doen√ßa card√≠aca', 'Asma', 'Artrite', 'Osteoporose',
    'Depress√£o', 'Ansiedade', 'S√≠ndrome metab√≥lica', 'Doen√ßa da tireoide',
    'DPOC', 'Doen√ßa renal', 'Doen√ßa hep√°tica', 'Fibromialgia', 'Enxaqueca'
  ];

  // üéØ MEDICAMENTOS COMUNS
  const commonMedications = [
    'Nenhum medicamento', 'Anti-hipertensivos', 'Metformina', 'Insulina',
    'Estatinas', 'Aspirina', 'Antidepressivos', 'Ansiol√≠ticos',
    'Anti-inflamat√≥rios', 'Horm√¥nios da tireoide', 'Contraceptivos',
    'Corticoides', 'Antihistam√≠nicos', 'Suplementos hormonais'
  ];

  // üéØ SUPLEMENTOS REGULARES
  const regularSupplements = [
    'Multivitam√≠nico', 'Vitamina D', 'Vitamina B12', '√îmega 3', 'Magn√©sio',
    'Zinco', 'Ferro', 'C√°lcio', 'Vitamina C', 'Probi√≥ticos', 'Coenzima Q10',
    'Ashwagandha', 'Curcumina', 'Melatonina', 'GABA', 'L-teanina'
  ];

  // üéØ DEFICI√äNCIAS NUTRICIONAIS
  const nutritionalDeficiencies = [
    'Nenhuma defici√™ncia conhecida', 'Vitamina D', 'Vitamina B12', 'Ferro',
    'Magn√©sio', 'Zinco', 'Folato', 'Vitamina B6', 'C√°lcio', '√îmega 3',
    'Vitamina C', 'Sel√™nio', 'Iodo', 'Vitamina K'
  ];

  // üéØ ALERGIAS COMUNS
  const commonAllergies = [
    'Nenhuma alergia conhecida', 'P√≥len', '√Åcaros', 'Pelos de animais',
    'Poeira', 'Alimentos (especificar)', 'Medicamentos', 'L√°tex',
    'Produtos qu√≠micos', 'Metais', 'Cosm√©ticos'
  ];

  // üéØ MUDAN√áAS DE SA√öDE RECENTES
  const recentHealthChanges = [
    'Nenhuma mudan√ßa significativa', 'Ganho de peso', 'Perda de peso',
    'Aumento da fadiga', 'Problemas de sono', 'Mudan√ßas de humor',
    'Dores novas', 'Problemas digestivos', 'Mudan√ßas na libido',
    'Problemas de mem√≥ria', 'Mudan√ßas na pele', 'Problemas hormonais'
  ];

  // üéØ HIST√ìRICO M√âDICO
  const surgeryTypes = [
    'Nunca fiz cirurgia', 'Cirurgia card√≠aca', 'Cirurgia ortop√©dica',
    'Cirurgia abdominal', 'Cirurgia ginecol√≥gica', 'Cirurgia neurol√≥gica',
    'Cirurgia pl√°stica', 'Cirurgia de catarata', 'Outras cirurgias'
  ];

  const familyHistoryConditions = [
    'N√£o h√° hist√≥rico relevante', 'Doen√ßa card√≠aca', 'Diabetes', 'C√¢ncer',
    'Hipertens√£o', 'Doen√ßa mental', 'Alzheimer', 'Osteoporose', 'Obesidade',
    'Doen√ßas autoimunes', 'Problemas da tireoide'
  ];

  // üîß FUN√á√ïES UTILIT√ÅRIAS
  const calculateHealthScore = (healthData: any): number => {
    let score = 100;
    
    // Penalizar por condi√ß√µes cr√¥nicas (exceto "nenhuma")
    const conditions = healthData.chronicConditions.filter((c: string) => c !== 'Nenhuma condi√ß√£o cr√¥nica');
    score -= conditions.length * 10;
    
    // Penalizar por m√∫ltiplos medicamentos
    const medications = healthData.medications.filter((m: string) => m !== 'Nenhum medicamento');
    score -= medications.length * 5;
    
    // Considerar sa√∫de geral e mental
    score += (healthData.overallHealth - 3) * 10;
    score += (healthData.mentalHealth - 3) * 10;
    
    // Penalizar por alto n√≠vel de estresse
    score -= (healthData.stressLevel - 3) * 5;
    
    return Math.max(0, Math.min(100, Math.round(score)));
  };

  const identifyRiskFactors = (healthData: any): string[] => {
    const risks: string[] = [];
    
    if (healthData.stressLevel >= 4) risks.push('Alto n√≠vel de estresse');
    if (healthData.mentalHealth <= 2) risks.push('Sa√∫de mental comprometida');
    if (healthData.overallHealth <= 2) risks.push('Sa√∫de geral comprometida');
    if (healthData.chronicConditions.includes('Diabetes tipo 2')) risks.push('Risco cardiovascular elevado');
    if (healthData.chronicConditions.includes('Hipertens√£o')) risks.push('Press√£o arterial elevada');
    if (healthData.nutritionalDeficiencies.length > 2) risks.push('M√∫ltiplas defici√™ncias nutricionais');
    
    return risks;
  };

  const determinePriorities = (healthData: any): string[] => {
    const priorities: string[] = [];
    
    if (healthData.stressLevel >= 4) priorities.push('Gest√£o de estresse');
    if (healthData.mentalHealth <= 2) priorities.push('Suporte psicol√≥gico');
    if (healthData.nutritionalDeficiencies.length > 0) priorities.push('Corre√ß√£o nutricional');
    if (healthData.medications.length > 3) priorities.push('Revis√£o medicamentosa');
    
    return priorities;
  };

  // üîß VALIDA√á√ÉO E C√ÅLCULOS
  useEffect(() => {
    const newErrors: Record<string, string> = {};
    
    // Valida√ß√µes b√°sicas
    if (data.healthStatus.overallHealth < 1 || data.healthStatus.overallHealth > 5) {
      newErrors.overallHealth = 'Sa√∫de geral deve estar entre 1 e 5';
    }
    if (data.healthStatus.mentalHealth < 1 || data.healthStatus.mentalHealth > 5) {
      newErrors.mentalHealth = 'Sa√∫de mental deve estar entre 1 e 5';
    }
    if (data.healthStatus.stressLevel < 1 || data.healthStatus.stressLevel > 5) {
      newErrors.stressLevel = 'N√≠vel de estresse deve estar entre 1 e 5';
    }

    setErrors(newErrors);

    // Calcular insights
    const healthScore = calculateHealthScore(data.healthStatus);
    const riskFactors = identifyRiskFactors(data.healthStatus);
    const priorities = determinePriorities(data.healthStatus);

    setInsights({ healthScore, riskFactors, priorities });

    // Valida√ß√£o geral
    const isValid = Object.keys(newErrors).length === 0;
    onValidationChange(isValid);
  }, [data.healthStatus, onValidationChange]);

  // üîß HANDLERS
  const updateHealthStatus = (field: string, value: any) => {
    onUpdate({
      healthStatus: {
        ...data.healthStatus,
        [field]: value
      }
    });
  };

  const updateMedicalHistory = (field: string, value: any) => {
    onUpdate({
      healthStatus: {
        ...data.healthStatus,
        medicalHistory: {
          ...data.healthStatus.medicalHistory,
          [field]: value
        }
      }
    });
  };

  const toggleArrayItem = (field: string, item: string) => {
    const currentArray = data.healthStatus[field as keyof typeof data.healthStatus] as string[];
    const newArray = currentArray.includes(item)
      ? currentArray.filter(i => i !== item)
      : [...currentArray, item];
    
    updateHealthStatus(field, newArray);
  };

  const toggleHistoryItem = (field: string, item: string) => {
  // Verificar se o campo existe na interface
  if (field === 'familyHistory') {
    // Se familyHistory n√£o existe, use significantIllnesses ou crie um campo alternativo
    const currentArray = data.healthStatus.medicalHistory.significantIllnesses || [];
    const newArray = currentArray.includes(item)
      ? currentArray.filter(i => i !== item)
      : [...currentArray, item];
    
    updateMedicalHistory('significantIllnesses', newArray);
  } else {
    // Para outros campos (surgeries, hospitalizations)
    const currentArray = data.healthStatus.medicalHistory[field as keyof typeof data.healthStatus.medicalHistory] as string[];
    const newArray = currentArray.includes(item)
      ? currentArray.filter(i => i !== item)
      : [...currentArray, item];
    
    updateMedicalHistory(field, newArray);
  }
};

  return (
    <div className="space-y-8">
      {/* Avalia√ß√µes Gerais */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <label className="flex items-center gap-2 text-sm font-medium text-gray-700 mb-3">
            <Heart className="w-4 h-4" />
            Sa√∫de geral
          </label>
          <div className="space-y-2">
            {[1, 2, 3, 4, 5].map((value) => (
              <button
                key={value}
                onClick={() => updateHealthStatus('overallHealth', value)}
                className={`w-full p-3 rounded border text-sm transition-all ${
                  data.healthStatus.overallHealth === value
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                {value} - {['Muito ruim', 'Ruim', 'Regular', 'Boa', 'Excelente'][value - 1]}
              </button>
            ))}
          </div>
          {errors.overallHealth && (
            <p className="mt-1 text-sm text-red-600">{errors.overallHealth}</p>
          )}
        </div>

        <div>
          <label className="flex items-center gap-2 text-sm font-medium text-gray-700 mb-3">
            <Brain className="w-4 h-4" />
            Sa√∫de mental
          </label>
          <div className="space-y-2">
            {[1, 2, 3, 4, 5].map((value) => (
              <button
                key={value}
                onClick={() => updateHealthStatus('mentalHealth', value)}
                className={`w-full p-3 rounded border text-sm transition-all ${
                  data.healthStatus.mentalHealth === value
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                {value} - {['Muito ruim', 'Ruim', 'Regular', 'Boa', 'Excelente'][value - 1]}
              </button>
            ))}
          </div>
          {errors.mentalHealth && (
            <p className="mt-1 text-sm text-red-600">{errors.mentalHealth}</p>
          )}
        </div>

        <div>
          <label className="flex items-center gap-2 text-sm font-medium text-gray-700 mb-3">
            <TrendingDown className="w-4 h-4" />
            N√≠vel de estresse
          </label>
          <div className="space-y-2">
            {[1, 2, 3, 4, 5].map((value) => (
              <button
                key={value}
                onClick={() => updateHealthStatus('stressLevel', value)}
                className={`w-full p-3 rounded border text-sm transition-all ${
                  data.healthStatus.stressLevel === value
                    ? 'border-red-500 bg-red-50 text-red-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                {value} - {['Muito baixo', 'Baixo', 'Moderado', 'Alto', 'Muito alto'][value - 1]}
              </button>
            ))}
          </div>
          {errors.stressLevel && (
            <p className="mt-1 text-sm text-red-600">{errors.stressLevel}</p>
          )}
        </div>
      </div>

      {/* Condi√ß√µes Cr√¥nicas */}
      <div>
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700 mb-3">
          <AlertTriangle className="w-4 h-4" />
          Condi√ß√µes cr√¥nicas (selecione todas que se aplicam)
        </label>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
          {chronicConditions.map((condition) => (
            <label
              key={condition}
              className="flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer"
            >
              <input
                type="checkbox"
                checked={data.healthStatus.chronicConditions.includes(condition)}
                onChange={() => toggleArrayItem('chronicConditions', condition)}
                className="rounded border-gray-300 text-red-600 focus:ring-red-500"
              />
              <span className="text-sm text-gray-700">{condition}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Medicamentos e Suplementos */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="flex items-center gap-2 text-sm font-medium text-gray-700 mb-3">
            <Pill className="w-4 h-4" />
            Medicamentos prescritos
          </label>
          <div className="space-y-2">
            {commonMedications.map((medication) => (
              <label
                key={medication}
                className="flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer"
              >
                <input
                  type="checkbox"
                  checked={data.healthStatus.medications.includes(medication)}
                  onChange={() => toggleArrayItem('medications', medication)}
                  className="rounded border-gray-300 text-orange-600 focus:ring-orange-500"
                />
                <span className="text-sm text-gray-700">{medication}</span>
              </label>
            ))}
          </div>
        </div>

        <div>
          <label className="text-sm font-medium text-gray-700 mb-3 block">
            Suplementos regulares
          </label>
          <div className="space-y-2">
            {regularSupplements.map((supplement) => (
              <label
                key={supplement}
                className="flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer"
              >
                <input
                  type="checkbox"
                  checked={data.healthStatus.regularSupplements.includes(supplement)}
                  onChange={() => toggleArrayItem('regularSupplements', supplement)}
                  className="rounded border-gray-300 text-green-600 focus:ring-green-500"
                />
                <span className="text-sm text-gray-700">{supplement}</span>
              </label>
            ))}
          </div>
        </div>
      </div>

      {/* Defici√™ncias e Alergias */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="text-sm font-medium text-gray-700 mb-3 block">
            Defici√™ncias nutricionais conhecidas
          </label>
          <div className="space-y-2">
            {nutritionalDeficiencies.map((deficiency) => (
              <label
                key={deficiency}
                className="flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer"
              >
                <input
                  type="checkbox"
                  checked={data.healthStatus.nutritionalDeficiencies.includes(deficiency)}
                  onChange={() => toggleArrayItem('nutritionalDeficiencies', deficiency)}
                  className="rounded border-gray-300 text-yellow-600 focus:ring-yellow-500"
                />
                <span className="text-sm text-gray-700">{deficiency}</span>
              </label>
            ))}
          </div>
        </div>

        <div>
          <label className="text-sm font-medium text-gray-700 mb-3 block">
            Alergias conhecidas
          </label>
          <div className="space-y-2">
            {commonAllergies.map((allergy) => (
              <label
                key={allergy}
                className="flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer"
              >
                <input
                  type="checkbox"
                  checked={data.healthStatus.allergies.includes(allergy)}
                  onChange={() => toggleArrayItem('allergies', allergy)}
                  className="rounded border-gray-300 text-red-600 focus:ring-red-500"
                />
                <span className="text-sm text-gray-700">{allergy}</span>
              </label>
            ))}
          </div>
        </div>
      </div>

      {/* Mudan√ßas Recentes */}
      <div>
        <label className="text-sm font-medium text-gray-700 mb-3 block">
          Mudan√ßas de sa√∫de recentes (√∫ltimos 6 meses)
        </label>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
          {recentHealthChanges.map((change) => (
            <label
              key={change}
              className="flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer"
            >
              <input
                type="checkbox"
                checked={data.healthStatus.recentHealthChanges.includes(change)}
                onChange={() => toggleArrayItem('recentHealthChanges', change)}
                className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
              />
              <span className="text-sm text-gray-700">{change}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Hist√≥rico M√©dico */}
      <div className="bg-gray-50 rounded-lg p-6">
        <h3 className="font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Shield className="w-5 h-5" />
          Hist√≥rico M√©dico
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="text-sm font-medium text-gray-700 mb-2 block">
              Cirurgias realizadas
            </label>
            <div className="space-y-2">
              {surgeryTypes.map((surgery) => (
                <label
                  key={surgery}
                  className="flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer"
                >
                  <input
                    type="checkbox"
                    checked={data.healthStatus.medicalHistory.surgeries.includes(surgery)}
                    onChange={() => toggleHistoryItem('surgeries', surgery)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">{surgery}</span>
                </label>
              ))}
            </div>
          </div>

              <div>
  <label className="text-sm font-medium text-gray-700 mb-2 block">
    Hist√≥rico familiar relevante
  </label>
  <div className="space-y-2">
    {familyHistoryConditions.map((condition) => (
      <label
        key={condition}
        className="flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer"
      >
        <input
          type="checkbox"
          checked={data.healthStatus.medicalHistory.significantIllnesses.includes(condition)}
          onChange={() => toggleHistoryItem('familyHistory', condition)}
          className="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
        />
        <span className="text-sm text-gray-700">{condition}</span>
      </label>
    ))}
  </div>
</div>
          
        </div>
      </div>

      {/* Insights de Sa√∫de */}
      {insights.healthScore !== undefined && (
        <div className="bg-blue-50 rounded-lg p-4">
          <div className="flex items-center gap-2 mb-3">
            <Activity className="w-5 h-5 text-blue-600" />
            <h3 className="font-medium text-blue-900">An√°lise de Sa√∫de Geral</h3>
          </div>
          
          <div className="space-y-3">
            <div className="flex items-center gap-4">
              <span className="text-blue-700">Score de sa√∫de:</span>
              <div className="flex-1 bg-white rounded-full h-3">
                <div 
                  className={`h-3 rounded-full transition-all ${
                    insights.healthScore >= 80 ? 'bg-green-500' :
                    insights.healthScore >= 60 ? 'bg-yellow-500' : 'bg-red-500'
                  }`}
                  style={{ width: `${insights.healthScore}%` }}
                />
              </div>
              <span className="font-medium text-blue-900">{insights.healthScore}/100</span>
            </div>

            {insights.riskFactors && insights.riskFactors.length > 0 && (
              <div>
                <span className="text-blue-700 font-medium">Fatores de risco identificados:</span>
                <ul className="mt-1 space-y-1">
                  {insights.riskFactors.map((risk, index) => (
                    <li key={index} className="text-red-600 text-sm flex items-center gap-1">
                      <AlertTriangle className="w-3 h-3" />
                      {risk}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {insights.priorities && insights.priorities.length > 0 && (
              <div>
                <span className="text-blue-700 font-medium">Prioridades de cuidado:</span>
                <ul className="mt-1 space-y-1">
                  {insights.priorities.map((priority, index) => (
                    <li key={index} className="text-blue-600 text-sm flex items-center gap-1">
                      <span className="w-1 h-1 bg-blue-500 rounded-full"></span>
                      {priority}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Informa√ß√µes Cient√≠ficas */}
      <div className="bg-blue-50 rounded-lg p-4">
        <div className="flex items-start gap-3">
          <Info className="w-5 h-5 text-blue-500 mt-0.5 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-blue-900 mb-2">Medicina Preventiva e Personalizada</h4>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>‚Ä¢ <strong>Avalia√ß√£o hol√≠stica:</strong> Considera sa√∫de f√≠sica, mental e social</li>
              <li>‚Ä¢ <strong>Medicina preventiva:</strong> Identifica√ß√£o precoce de fatores de risco</li>
              <li>‚Ä¢ <strong>Intera√ß√µes medicamentosas:</strong> M√∫ltiplos medicamentos podem interagir</li>
              <li>‚Ä¢ <strong>Defici√™ncias nutricionais:</strong> Podem afetar m√∫ltiplos sistemas</li>
              <li>‚Ä¢ <strong>Hist√≥rico familiar:</strong> Importante para preven√ß√£o personalizada</li>
              <li>‚Ä¢ <strong>Estresse cr√¥nico:</strong> Fator de risco para m√∫ltiplas doen√ßas</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BiohackingStep5;// src/components/onboarding/steps/BiohackingStep4.tsx - Atividade F√≠sica
